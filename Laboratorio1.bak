#lang racket

;Contructor
;Dominio: Entero x entero x [pixbit-d* | pixrgb-d* | pixhex-d*]
;Recorrido: imagen

(define (imagen width heigth pix . pixs)
  (if (and (integer? width) (integer? heigth))
      (list width heigth (append (list pix) pixs))
      null))

;constructor pixbit
(define (pixbit-d x y bit depth)
  (if (or (eq? bit 1) (eq? bit 0))
      (if (and (integer? x) (integer? y))
          (if (integer? depth)
              (list x y bit depth)
              null)
          null)
      null))

(define (isPixBit? pixbit)
  (if (and (eq? (length pixbit) 4) (integer? (list-ref pixbit 2)))
      #t
      #f))

;contructor pixrgb
(define (pixrgb-d x y r g b d)
  (if (and (areValid? r g b) (and (integer? x) (integer? y)))
      (if (integer? d)
          (list x y r g b d)
          null)
      null))

(define (isValid? numero)
  (if (integer? numero)
      (if (and (>= numero 0) (<= numero 255))
          #t
          #f)
      #f))

(define (areValid? r g b)
  (if (and (isValid? r) (isValid? g))
      (isValid? b)
      #f
      ))

(define (isPixRGB? imagen)
  (if (eq? (length (list-ref imagen 2)) 6)
      #t
      #f))

;Constructor pixhex
(define (pixhex-d x y hex d)
  (if (and (integer? x) (integer? y))
      (if (integer? d)
          (if (string? hex)
              (list x y hex d)
              null)
          null)
      null))

(define (isHex? pixhex)
  (if (and (eq? (length pixhex) 4) (string? (list-ref pixhex 2)))
      #t
      #f))

;Selectores
; para obtener los pixs
(define (getpixbits imagen)
  (list-ref imagen 2))

;-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

;contructor
(define (bitmap? imagen)
  (eq? (length (list-ref imagen 2)) (length (filter isPixBit? (list-ref imagen 2)))))

;-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

;contructor
(define (pixmap? imagen)
  (eq? (length (list-ref imagen 2)) (length (filter isPixRGB? (list-ref imagen 2)))))

;-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

;contructor
(define (hexmap? imagen)
    (eq? (length (list-ref imagen 2)) (length (filter isHex? (list-ref imagen 2)))))

;-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

;constructor Compress

(define (menor lista)
  (cond
    [(null? lista) null]
    [<= (car lista) (car (cdr lista)) (menor (cons (car lista) (cddr lista)))]
    [else (menor (cdr lista))]))
  